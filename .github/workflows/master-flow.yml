# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      build_command:
        required: true
        type: string
      artifacts_publish_command:
        required: false
        type: string
      image_name:
        required: false
        type: string
      image_publish_command:
        required: false
        type: string
    secrets:
      aws_account_id:
        description: 'AWS_ACCOUNT_ID '
        required: true
      aws_access_key_id:
        description: 'AWS_ACCESS_KEY_ID '
        required: true
      aws_secret_access_key_id:
        description: 'AWS_SECRET_ACCESS_KEY '
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_id }}
          aws-region: eu-central-1
      - name: Initialize variables
        id: vars
        run: |
          codeartifact_token=$(aws codeartifact get-authorization-token --domain meapay-app --domain-owner ${{ secrets.aws_account_id }} --query authorizationToken --output text)
          ecr_token=$(aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken')
          echo "::add-mask::$codeartifact_token"
          echo "::add-mask::$ecr_token"
          echo "::set-output name=codeartifact_auth_token::$codeartifact_token"
          echo "::set-output name=ecr_auth_token::$ecr_token"
          echo "::set-output name=image_version::$(./gradlew -q printVersion)"
      - name: Preparing build
        # not all repos have local properties file
        if: hashFiles('local.properties-template') != ''
        env:
          MAVEN_REPO_PAT: ${{ secrets.maven_repo_access_token }}
        run: |
          # Configuring credentials for Gradle connection to Azure Artifacts
          sed -i "s/PERSONAL_ACCESS_TOKEN/$MAVEN_REPO_PAT/g" local.properties-template
          mv local.properties-template local.properties

      - name: Building project
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ inputs.build_command }}
      - name: Publish Artifacts
        uses: gradle/gradle-build-action@v2
        if: success() && ${{ inputs.artifacts_publish_command != 0 }}
        with:
          arguments: ${{ inputs.artifacts_publish_command }} -PmavenUser=aws -PmavenPassword=${{ steps.vars.outputs.codeartifact_auth_token }}
      - name: Publish Docker Image
        env:
          DOCKER_IMAGE_NAME: ${{ inputs.image_name }}
          ACR_USERNAME: "aws"
          ACR_PASSWORD: ${{ steps.vars.outputs.codeartifact_auth_token }}
          IMAGE_VERSION: ${{ steps.vars.outputs.image_version }}
        uses: gradle/gradle-build-action@v2
        if: success() && ${{ inputs.image_publish_command != 0 }}
        with:
          arguments: ${{ inputs.image_publish_command }} -PacrPassword=${{ steps.vars.outputs.ecr_auth_token }}